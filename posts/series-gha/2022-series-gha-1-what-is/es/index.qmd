---
title: "Introducci√≥n a GitHub Actions para usuarias de R"
subtitle: "Serie GitHub Actions - 1 - En esta publicaci√≥n, presentar√© brevemente GitHub Actions y le mostrar√© c√≥mo puede comenzar a usar GitHub Actions con R."
author: "Beatriz Milz"
date: "2022-06-30"
categories: ["Git", "GitHub", "GitHub Actions", "Automations"]
image: "featured.png"
toc: true
draft: false
---

```{r multilang-buttons}
#| results: asis
#| echo: false
source(here::here("R/multilang.R"))
multilang()
```


::: callout-note
##  ¬°Bienvenides!
Esta publicaci√≥n fue escrita originalmente en ingl√©s y fue traducida con la ayuda del traductor de Google y revisada por m√≠. Mis habilidades en Espa√±ol son intermedias, as√≠ que si encuentras alg√∫n error de ortograf√≠a, ¬°av√≠same!
Buena lectura :)
:::


¬°Oye! Este es el primer post de la serie "GitHub Actions". Esta serie de post es un material complementario para mi charla rel√°mpago en la [Conferencia RStudio - rstudio::conf 2022](https://www.rstudio.com/conference/).



[![](images/talk.png){fig-align="center" width="70%"}](https://rstudioconf2022.sched.com/event/11ia9?iframe=no)

En esta publicaci√≥n, **presentar√© brevemente GitHub Actions y le mostrar√© c√≥mo puede comenzar a usar GitHub Actions con R**.

## ¬øQu√© es GitHub Actions?

[GitHub Actions](https://github.com/features/actions) es una herramienta de [GitHub](https://github.com/) que nos permite automatizar tareas con c√≥digo. Por ejemplo, podemos especificar una serie de comandos para que se ejecuten cuando se active.

Podemos hacer muchas automatizaciones diferentes con GitHub Actions, como:

- Descargar y guardar un archivo todos los d√≠as (como `.csv`/ `.xlsx`/ `.json`‚Ä¶);

- Ejecutar un script en R y guardar los resultados en una base de datos o una hoja de c√°lculo de Google, por ejemplo;

- Ejecuci√≥n de rutinas de web scraping;

- Actualizar documentos RMarkdown o Quarto;

- ¬°Etc√©tera! üöÄ


## ¬øC√≥mo utilizar GHA en un paquete en R?

GitHub Actions se utiliza ampliamente en el desarrollo de paquetes para CI/CD. Por ejemplo, las personas que desarrollan paquetes usan GitHub Actions para probar su c√≥digo, ejecutar rutinas de chequeo, actualizar la documentaci√≥n y el sitio web del paquete, y m√°s.

::: callout-tip
## ¬øQu√© es CI/CD en el contexto de paquetes en R?

La integraci√≥n continua (CI) es una pr√°ctica de desarrollo que requiere que las personas que desarrollan el paquete integren regularmente el c√≥digo en el repositorio, despu√©s de lo cual se realizan chequeos y pruebas automatizadas para verificar la integridad del nuevo c√≥digo.

La entrega continua (CD) es una metodolog√≠a de desarrollo de software en la que los cambios de c√≥digo se verifican, prueban y lanzan autom√°ticamente a producci√≥n. **Esto permite que se lancen con frecuencia nuevas versiones de los paquetes.**
:::

El paquete [usethis](https://usethis.r-lib.org/reference/github_actions.html) nos ayuda a configurar GitHub Actions en paquetes R. Es fundamental saber que, por defecto, las Actions creadas usando usethis provienen del repositorio  [r-lib/actions](https://github.com/r-lib/actions/tree/v2-branch/examples#readme). ¬°Guarde este enlace; el contenido es muy relevante!

::: callout-note
## üèÜ

Me gustar√≠a agradecer todo el trabajo realizado por quienes contribuyen al [repositorio r-lib/actions](https://github.com/r-lib/actions/graphs/contributors). üèÜ Para m√≠, este repositorio fue la fuente de contenido y c√≥digo m√°s importante sobre GitHub Actions en R.

[![](images/actions-repo.png){fig-align="center" width="100%"}](https://github.com/r-lib/actions/blob/v2-branch/examples/README.md)
:::


Aqu√≠ hay algunos ejemplos de c√≥mo configurar GH Actions en paquetes:

- Para realizar chequeos (como `devtools::check()`) en un paquete siempre que haya un cambio de c√≥digo, utilice:


```{r}
#| eval: false
usethis::use_github_action("check-release")
```


Esto es √∫til porque cada vez que ocurre un error en el cheque, recibimos un correo electr√≥nico de GitHub ‚ö†Ô∏è. De esa manera, sabemos que algo est√° malo en el c√≥digo y podemos solucionarlo lo antes posible.

Para actualizar el sitio web del paquete (como `pkgdown::build_site()`) cada vez que haya un cambio en el c√≥digo, utilice:


```{r}
#| eval: false
usethis::use_github_action("pkgdown")
```

Esto permite que el sitio web y la documentaci√≥n del paquete est√©n siempre actualizados. 
üìå

## ¬øC√≥mo utilizar GHA en un script en R?

Ya sabemos que podemos hacer automatizaciones realmente geniales en paquetes en R utilizando GitHub Actions. Pero la mayor√≠a de las personas que programan en R que conozco utilizan scripts R y archivos RMarkdown en el d√≠a a d√≠a. No encontr√© ejemplos del uso de GHA con scripts simples (sin la estructura del paquete) en el repositorio [r-lib/actions](https://github.com/r-lib/actions/blob/v2-branch/examples/README.md). Entonces, para eso, ¬°necesitamos saber c√≥mo funciona GHA!

La [documentaci√≥n de GitHub sobre flujos de trabajo](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions) es una fuente excelente para obtener m√°s informaci√≥n sobre este tema.


En primer lugar, la automatizaci√≥n realizada con GHA se llama **Workflow** (o flujo de trabajo). El flujo de trabajo tiene dos partes principales: **Events** (Eventos) y **Jobs** (Trabajos).


- **Events/Eventos** describen lo que puede iniciar un flujo de trabajo. Por ejemplo, un evento podr√≠a ser "comenzar este flujo de trabajo todos los d√≠as a las 9 am" o "cada vez que alguien hace un push al repositorio" (en otras palabras, cuando hay un cambio en el c√≥digo).

- **Jobs/Trabajos** describe lo que se supone que debe hacer la computadora. ¬°Imag√≠nese que comienza sin ning√∫n software instalado! Por lo tanto, debemos decir qu√© sistema operativo (SO) queremos que ejecute nuestro c√≥digo (por ejemplo, Ubuntu/Windows/Mac OS). Adem√°s, necesitamos instalar R y cualquier paquete necesario para ejecutar nuestro c√≥digo. Despu√©s de eso, podemos agregar el script que queremos ejecutar en R y guardar los resultados generados.


## Ejemplo

Este es un ejemplo de un archivo de workflow/flujo de trabajo simple. El flujo de trabajo comienza cuando presiona un bot√≥n en GitHub (el evento). Entonces, instala R e imprime el mensaje ‚ÄúHello R World!‚Äù en la consola (el trabajo).


``` yml
# Evento/Event - ¬øQu√© inicia el flujo de trabajo/workflow?
on:
  workflow_dispatch:

# Nombre del workflow
name: hello-r-world

# Jobs/Trabajos - ¬øQu√© debe hacer la computadora?
jobs:
  write-message:
    # Usar Ubuntu   
    runs-on: ubuntu-latest 
    steps:
       # Instalar R
      - uses: r-lib/actions/setup-r@v3    
      - name: print-message   
        # C√≥digo para ejecutar el script R
        run: Rscript -e 'print("Hello R World!")' 
```

## ¬°Nos vemos en el siguiente post!

Esa es la idea general de GitHub Actions. En la pr√≥xima publicaci√≥n, escribir√© c√≥mo puede crear un GHA que ejecute un script R y guarde el resultado en el repositorio de GitHub. ¬°Nos vemos pronto!

## Agradecimientos

[Daniel Falbel](https://github.com/dfalbel), [Athos Damiani](https://github.com/Athospd), y [Julio Trecenti](https://github.com/jtrecenti): las personas que me presentaron GitHub Actions, respondieron preguntas y enviaron muchos enlaces incre√≠bles. ¬°Gracias!

Personas que contribuyen al [repositorio r-lib/actions](https://github.com/r-lib/actions/graphs/contributors): üèÜ Para m√≠, este repositorio fue la fuente de contenido m√°s importante en GitHub Actions para R.


[Julio Trecenti](https://github.com/jtrecenti): gracias por revisar la versi√≥n en Ingl√©s del post! 

## Referencias

-   [GitHub Actions](https://github.com/features/actions)

-   [Paquete usethis](https://usethis.r-lib.org/reference/github_actions.html)

-   [Repositorio r-lib/actions](https://github.com/r-lib/actions/tree/v2-branch/examples#readme)

-   [Documentaci√≥n de GitHub sobre flujos de trabajo](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions)


